/**
@mainpage

\section libpicobt Libpicobt Overview

\subsection story A story

Peregrine tensed his legs and pushed his heels further into the mud. Sitting against one of the upright beams in the trench, his back would have felt uncomfortable if he weren't so distracted by the rattling of the packet fire overhead. A deep boom shook the earth beneath him and blue sparks shot across the sky as another logic bomb exploded nearby. That can't have been more then three hundred metres away, Peregrine thought.

Each day it felt like the enemy was closing in, but in fact the war had been gnawing away at their spirits for three months now. Each side would advance briefly, then fall back as the balance shifted. The terrain made it hard to win any ground, everything caked in mud, dormant munition scattered across the plain between the two trenches. Sometimes it felt more like they were fighting the mud than each other.

Peregrine thought about why the war had started in the first place. Tried to make some sense of it, to divine some purpose and motivate himself to fight on. The split between BSD sockets and WSA had existed for longer than he could remember. An uneasy balance of power. But when Bluetooth maintained the same dichotomy the tensions became too fraught. Neither side was willing to compromise, and so war broke out.

The monotony of it made Peregrine feel numb. His mind felt like it was swimming away, when all of a sudden he heard something he'd not heard before. He listened closely, attentive. Waited. Yes, what he was hearing was silence.

He waited a bit more, expecting to hear another explosion, the reloading of the drivers or the high-pitced whir of an ICMP flood. Nothing.

And then a shout from further along the trench. Not the shout of an injured soldier, but something jubilant.

"The war, it's over!"

Peregrine thought he heard. Could it really be?

And so it was. After months of fighting, no one really knowing what they were fighting for, a war of attrition, the fighting had finally come to an end. Libpicobt had finally arrived.

\subsection summary Summary

Libpicobt is a cross-platform Bluetooth library used by Pico. Windows (through the Windows Socket API) and Linux (through the BlueZ API) are currently supported. Libpicobt attempts to unify the Bluetooth interface so that both platforms can access the same functionality through a platform-independent and consistent interface.

\subsection install Installation

Libpicobt is available for Windows, either built using Visual Studio 2015, or MinGW. It is also available fir Linux in either DEB or RPM format.

\subsubsection windowsinstall Windows installation

There is no specific installation for Windows. Simply download a copy of the Windows archive from the [Pico website](https:mypico.org) and unzip it to a folder called `libpicobt` on your hard drive. When you want to compile and link a library against libpicobt, ensure the `libpicobt/include` folder is contained in your includes path, and that the `libpicobt` folder is included in your library path. See the \ref examples section for an idea about how to do this.

\subsubsection linuxinstall Linux installation

If you're running Ubuntu you can install libpicobt directly from the Pico PPA. Enter the following commands to add the PPA to your system:

```
sudo add-apt-repository ppa:mypico/ppa
sudo apt-get update
```

The install libpicobt using the following command. As well as libpicobt, this will also automaticall install all of its dependencies.

```
sudo apt install libpicobt-run
sudo apt install libpicobt-dev
```

This will install both the runtime and developer packages. If you just want to use libpicobt with another program and don't want to create new code linked to libpicobt, then the first line will be enough.

If you don't want to add the Pico PPA, you can also download the latest package from the [Pico website](https:mypico.org). You'll need to install all of the dependencies yourself if you do it this way (see the @ref deps section). Then use the following to install libpicobt:

```
sudo dpkg -i libpicobt_0.0.1_amd64-run.deb
sudo dpkg -i libpicobt_0.0.1_amd64-dev.deb
```

As before, you should install either the runtime package, or both the runtime and development packages, depending on your use case.

\subsection build Building from source

Ensure you have all of the dependencies listed \ref deps below. Then something along the following lines should do it.

\subsubsection windowsbuild Building for Windows

To build libpicobt for Windows, you'll need to have a copy of Visual Studio installed. Here we show how you can build it at the command line, but `cmake` will also produce Visual Studio ptoject files if you ask it to.

Open a Visual Studio command shell and then you can use the following sequence of commands to build the library.

```
git clone git@gitlab.dtg.cl.cam.ac.uk:pico/libpicobt.git
call "%VS140COMNTOOLS%..\..\VC\vcvarsall.bat" amd64
cd libpicobt
mkdir build
cd build 
cmake .. -G "NMake Makefiles" 
nmake
```



\subsubsection linuxbuild Building for Linux

```
git clone git@gitlab.dtg.cl.cam.ac.uk:pico/libpicobt.git
cd libpicobt
cmake .
make package
```

This will create a shared library `libpicobt.so` a static library `libpicobt.a` and two deb packages in the `packages` folder.

\subsubsection dicbuild Building the documentation

The documentation you're reading now was generated using doxygen. If you want to generate it yourself, get the libpicobt source and simply run `doxygen` in the project root.

```
doxygen
```

The html files will be generated and output to the docs folder.

\subsection deps Dependencies

On Linux libpicobt requires the following runtime dependencies (at least):
 - libbluetooth3, version 4.91 or later
 - libc6, version 2.14 or later

To build on Linux you'll need the following (at east):
 - libbluetooth-dev, version 4.91 or later
 - cmake, version 2.8 or later
 - gcc
 - make
 - dh-exec (to build the DEB package)
 - doxygen (to build this documentation)

On Windows libpicobt requires the following runtime dependencies:
 - Visual Studio 2015 (VS14)
 - cmake, version 2.8 or later

\subsection examples Example code

Below are two short snippets of code that provide an eco server and client that connects using Bluetooth. To test this code, change the value of `REMOTE_ADDRESS` to the MAC address of a device that is paired with the client.

To build the example on Linux use, save out the code as `server-port.c` and `client-port.c` and use

```
gcc server-port.c -o server-port -Ilibpicobt/include -Llibpicobt -lbt -lbluetooth
gcc client-port.c -o client-port -Ilibpicobt/include -Llibpicobt -lbt -lbluetooth
```

To build it on Windows, save out the code as `server-port.c` and use

```
gcc server-port.c -o server-port.exe -Ilibpicobt/include -Llibpicobt -lbt -lws2_32 -DWINDOWS
gcc client-port.c -o client-port.exe -Ilibpicobt/include -Llibpicobt -lbt -lws2_32 -DWINDOWS
```

The <a href="examples.html">examples</a> page provides some example code for how to use the functionality of libpicobt.

\subsubsection server Example echo server code

\include server-port.c

\subsubsection server Example echo client code

\include client-port.c

\subsection authors Authors

The libpicobt library was created by the <a href="https://mypico.org">Pico Team</a>.

*/

/**

\example devicelist.c

This example shows how you can test the device list functionality.

\example discovery.c

A test program that performs a Bluetooth device discovery and lists the results.

\example services.c

A small test app to make sure your Bluetooth is working. Lists all the Bluetooth services registered on a remote device.

\example server-port.c

A test program that opens an echo server on a specific port This code should be used with the client counterpart \ref client-port.c in a different machine.

It will basically open a Bluetooth listening socket on the port defined by `CHANNEL`, read exactly 6 bytes (client-port sends the string "Hello") and reply with the same string. 

\example client-port.c

A test program that opens a connection to specific address and port, defined at `REMOTE_ADDRESS` and `CHANNEL`, then write the string "Hello" and expect to read the same string back.

\example server-service.c

A test program that opens an echo server and advertises it as a Bluetooth service. This code should be used with the client counterpart \ref client-service.c in a different machine.

It will basically open a Bluetooth listening socket, advertise with the UUID define in SERVICE_UUID, read exactly 6 bytes (client-port sends the string "Hello") and reply with the same string. 

When the server is waiting for a connection, the service can also be found using \ref services.c

\example client-service.c

A test program that opens a connection to specific address and service, defined at `REMOTE_ADDRESS` and `SERVICE_UUID`, then write the string "Hello" and expect to read the same string back.

*/
